[
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31T15:11:45.440589",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略，平均时间复杂度为O(nlogn)",
    "frontend_category": "competition",
    "id": 293,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(logn)",
    "status": "active",
    "time_complexity": "O(nlogn)",
    "title": "快速排序算法",
    "updated_at": "2025-08-31T15:11:45.440589"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:29:56",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 380,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 10:29:56"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:29:56",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 383,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 10:29:56"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:20:11",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 374,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 10:20:11"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:20:11",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 377,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 10:20:11"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:33:51",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 368,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 09:33:51"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:33:51",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 371,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 09:33:51"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:28:16",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 362,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 09:28:16"
  },
  {
    "author": null,
    "category": "基础算法",
    "code_preview": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:28:16",
    "demo_url": null,
    "description": "一种高效的排序算法，使用分治策略",
    "frontend_category": "competition",
    "id": 365,
    "order_index": 1,
    "pdf_url": null,
    "space_complexity": "O(log n)",
    "status": "active",
    "time_complexity": "O(n log n)",
    "title": "快速排序",
    "updated_at": "2025-08-31 09:28:16"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31T15:11:45.440589",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案，通过构建最优子结构来解决问题",
    "frontend_category": "competition",
    "id": 294,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31T15:11:45.440589"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:29:56",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 381,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 10:29:56"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:29:56",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 384,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 10:29:56"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:20:11",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 375,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 10:20:11"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:20:11",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 378,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 10:20:11"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:33:51",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 369,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 09:33:51"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:33:51",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 372,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 09:33:51"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:28:16",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 363,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 09:28:16"
  },
  {
    "author": null,
    "category": "动态规划",
    "code_preview": "def knapsack(values, weights, W):\n    n = len(values)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])\n            else:\n                dp[i][w] = dp[i-1][w]\n    return dp[n][W]",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:28:16",
    "demo_url": null,
    "description": "经典的0-1背包问题解决方案",
    "frontend_category": "competition",
    "id": 366,
    "order_index": 2,
    "pdf_url": null,
    "space_complexity": "O(nW)",
    "status": "active",
    "time_complexity": "O(nW)",
    "title": "动态规划 - 背包问题",
    "updated_at": "2025-08-31 09:28:16"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:29:56",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 382,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 10:29:56"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:29:56",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 385,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 10:29:56"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:20:11",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 376,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 10:20:11"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 10:20:11",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 379,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 10:20:11"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:33:51",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 370,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 09:33:51"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:33:51",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 373,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 09:33:51"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:28:16",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 364,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 09:28:16"
  },
  {
    "author": null,
    "category": "数据结构",
    "code_preview": "class TreeNode:\n    def __init__(self, val=0):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val)\n        inorder_traversal(root.right)",
    "code_url": null,
    "complexity": null,
    "created_at": "2025-08-31 09:28:16",
    "demo_url": null,
    "description": "二叉树的前序、中序、后序遍历",
    "frontend_category": "data-structures",
    "id": 367,
    "order_index": 3,
    "pdf_url": null,
    "space_complexity": "O(h)",
    "status": "active",
    "time_complexity": "O(n)",
    "title": "二叉树遍历",
    "updated_at": "2025-08-31 09:28:16"
  }
]